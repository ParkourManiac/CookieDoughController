import re
import os
import sys

if len(sys.argv) <= 1:
    raise NameError("ABORTED: Please provide a folder in which the testSuite.cpp will be generated.")
else:
    # Reads/grabs all tests from all files ending with Test.cpp
    currentDir = sys.argv[1] + '/'
    allMethodNames = []
    for fileName in os.listdir(currentDir):
        if fileName.endswith("Test.cpp"):
            with open(currentDir + fileName, "r") as file:
                text = file.read()
                regex = r"(?<=\nvoid\s)(.+)(?=\(\))"
                matches = re.findall(regex, text)

                for match in matches:
                    allMethodNames.append(match)

    # Reads/grabs all Fake functions and their parameters in folder "Fakes".
    fakesDir = sys.argv[1] + '/Fakes/'
    allNeccessaryIncludes = []
    allMockableFunctions = []
    for fileName in os.listdir(fakesDir):
        if fileName.endswith(".h"):
            with open(fakesDir + fileName, "r") as file:
                text = file.read()

                allNeccessaryIncludes.append(fileName)
                #print(allNeccessaryIncludes)

                regex = r"([^\(\)\;\n]+)\s([^\(\)\;\n]+)\(([^\)\;]*)\)(?=\;)"
                matches = re.findall(regex, text)

                for match in matches:
                    returnType = match[0]
                    nameOfFunction = match[1]

                    rawParameters = match[2].split(",")
                    parameters = []
                    for rawParameter in rawParameters:
                        if len(rawParameter) > 0:
                            parameterParts = rawParameter.strip().split()
                            parameterName = parameterParts.pop(len(parameterParts) - 1)
                            parameterType = " ".join(parameterParts)

                            newParameter = { 'name': parameterName, 'type': parameterType }
                            parameters.append(newParameter)

                    newFunction = { 'returnType': returnType, 'name': nameOfFunction, 'parameters': parameters}
                    allMockableFunctions.append(newFunction)
                    #print(newFunction)

    showMockedFunctions = '\nMocking functions: '
    for function in allMockableFunctions:
        showMockedFunctions += function['name'] + ". "
    print(showMockedFunctions)

    # Write tests to RunTest function.
    with open(currentDir + "testSuite.cpp", "w") as file:
        file.write('// THIS FILE WAS AUTOGENERATED BY FILE generateTestSuite.py\n')
        file.write('#include "testSuite.h" \n#include "test.h"\n\n')

        # Write all includes needed for mocked functions.
        for include in allNeccessaryIncludes:
            file.write('#include \"Fakes/' + include + '\"\n')
        file.write('\n')

        for methodName in allMethodNames:
            file.write('void ' + methodName + '();\n')

        file.write('\nvoid RunTests() \n{\n')

        for methodName in allMethodNames:
            file.write('\tRUN_TEST(' + methodName + ');\n')
        
        file.write('}\n\n')


        # Write global variables for mocked functions.
        # Write Reset global variables for mocked functions.
        for mockableFunction in allMockableFunctions:
            if mockableFunction['returnType'] != 'void':
                file.write(mockableFunction['returnType'] + ' ' + mockableFunction['name'] + '_' + 'return;\n')
            file.write('unsigned int' + ' ' + mockableFunction['name'] + '_' + 'invocations = 0;\n')

            for parameter in mockableFunction['parameters']:
                file.write(parameter['type'] + ' ' + mockableFunction['name'] + '_param_' + parameter['name'] + ';\n')

            # Write mocked function.
            file.write(mockableFunction['returnType'] + ' ' + mockableFunction['name'] + '(')
            for i in range(len(mockableFunction['parameters'])):
                currentParam = mockableFunction['parameters'][i]
                file.write(currentParam['type'] + ' ' + currentParam['name'])
                if i != len(mockableFunction['parameters']) - 1:
                    file.write(", ")

            file.write(')\n{\n')

            # Fill function body with mocked functionality.
            for parameter in mockableFunction['parameters']:
                file.write('\t' + mockableFunction['name'] + '_param_' + parameter['name'] + ' = ' + parameter['name'] + ';\n') # TODO: Break out into function.
            file.write('\t' + mockableFunction['name'] + '_' + 'invocations++;\n')
            if mockableFunction['returnType'] != 'void':
                file.write('\treturn ' + mockableFunction['name'] + '_' + 'return;\n')
            
            file.write('}\n\n')

            
        
        file.write('\nvoid ResetMocks() \n{\n')

        for mockableFunction in allMockableFunctions:
            for parameter in mockableFunction['parameters']:
                lastTypeParts = parameter['type'].strip().split()[-1]
                file.write('\t' + mockableFunction['name'] + '_param_' + parameter['name'] + ' = ' + lastTypeParts + '();\n') # TODO: Break out into function.
            file.write('\t' + mockableFunction['name'] + '_' + 'invocations = 0;\n')
            if mockableFunction['returnType'] != 'void':
                lastReturnTypeParts = mockableFunction['returnType'].strip().split()[-1]
                file.write('\t' + mockableFunction['name'] + '_' + 'return = ' + lastReturnTypeParts + '();\n')

        file.write('}\n\n')
        

    
