// THIS FILE WAS AUTOGENERATED BY FILE generateTestSuite.py
#include "testSuite.h" 
#include "test.h"

#include "Fakes/Arduino.h"

void EditModeInitialized_NotEnabledByDefault();
void SerialIsMocked_Works();
void ConfigurePinForKey_IKeysPinIsPassedToPinMode();
void ConfigurePinForKeyOfTypeKey_IsCorrectlyParsedToIKey();
void ConfigurePinForKeyOfTypeSpecialKey_IsCorrectlyParsedToIKey();
void ConfigurePinForKey_ConfiguresPinAsInputPullup();
void ConfigurePinForKey_CallsPinModeOnce();
void OnKeyPress_PinStateWentFromInactiveToActive_ReturnsTrue();
void OnKeyPress_PinStateValueDidNotChange_ReturnsFalse();
void OnKeyPress_PinStateIsInactive_ReturnFalse();
void OnKeyRelease_PinStateChangedToInactive_ReturnTrue();
void OnKeyRelease_PinStateDidNotChange_ReturnFalse();
void OnKeyRelease_PinStateIsActive_ReturnFalse();
void OnLongPress_TimePassedIsNotGreaterThanLongPressDuration_ReturnFalse();
void OnLongPress_TimePassedIsGreaterThanLongPressDuration_ReturnTrue();
void OnLongPress_TimePassedIsEqualToLongPressDuration_ReturnTrue();
void ConfigurePinsForKeyMap_InvokesPinModeForEachKey();
void ConfigurePinsForKeyMap_CallsPinModeWithPinFromKeyMap();
void ConfigurePinsForKeyMap_SetsUpPinAsInputPullup();
void DebounceRead_UpdatesOldValueOfStateWithPreviousStateValue();
void DebounceRead_ReadsStateOfPin();
void DebounceRead_PinStateHasChanged_UpdatesLastDebounceTime();
void DebounceRead_PinStateHasNotChanged_DoesNotUpdateLastDebounceTime();
void DebounceRead_DebounceTimeExceededAndValueIsOutdated_UpdateStateValue();
void DebounceRead_DebounceTimeExceededAndValueIsOutdatedAndTheNewValueIsActive_UpdateTheTimeOfActivation();
void DebounceRead_ValueIsOutdatedButDebounceTimeIsNotExceeded_DoesNotUpdateStateValue();
void DebounceRead_DebounceTimeExceededAndTheValueIsActiveButValueIsNotOutdated_DoesNotUpdateTheTimeOfActivation();
void DebounceRead_OldPinStateIsUpdated();
void ReadPinValuesForKeyMap_CallsDigitalReadForEachItem();
void ReadPinValuesForKeyMap_CorrectlyParsesKeyPin();
void ReadPinValuesForKeyMap_UpdatesStateForAllPins();
void GetFirstNode_GetsFirstNode();
void GetSecondNode_GetsSecondNode();
void GetNodeInTheMiddleOfList_GetsNode();
void GetLastNodeByPassingInLengthMinusOne_GetsLastNode();
void TryToGetNodeOutOfRange_GetsNullptr();
void TryToGetNodeWithEmptyList_GetsNullptr();
void TryToGetNodeWithNegativeNumber_GetsNullptr();
void GetTwoDifferentNodes_AllNodesAreNotTheSame();
void GetFirstItemUsingSubscriptOperator_GetsItem();
void GetSecondItemUsingSubscriptOperator_GetsSecondItem();
void GetItemInTheMiddleOfListUsingSubscriptOperator_GetsItem();
void GetLastItemByPassingLengthMinusOneToSubscriptOperator_GetsLastItem();
void OutOfRangeInSubscriptOperator_GetsNullptr();
void UsingSubscriptOperatorWithEmptyList_GetsNullptr();
void UsingSubscriptOperatorWithNegativeNumber_GetsNullptr();
void UsingSubscriptOperator_AllItemsAreNotTheSame();
void AddItemToList_ListContainsItem();
void AddOneItemToList_ItemBecomesHead();
void AddOneItemToList_ItemBecomesTail();
void AddTwoItemsToList_FirstIsHeadSecondIsTail();
void AddMultipleItemsToList_FirstlyAddedIsHeadLastlyAddedIsTail();
void AddItem_LengthIncreasesByOne();
void InsertItemIntoEmptyList_ItemIsHead();
void InsertItemIntoEmptyList_ItemIsTail();
void InsertItemAtIndexZero_ItemIsHead();
void InsertItemAtLastIndex_ItemIsTail();
void InsertItemAtIndexThenGetItemFromIndex_ItemAtIndexIsTheInsertedItem();
void InsertItemIntoMiddleOfPopulatedList_AllItemsArePresent();
void InsertItemIntoEmptyListWithIndexOutOfRange_NothingIsAdded();
void InsertItemIntoPopulatedListWithIndexOutOfRange_NothingIsAdded();
void InsertItem_LengthIncreasesByOne();
void InsertMultipleItems_LengthIsSameAsAmountOfItems();
void InsertItemAtLastIndexUsingLength_ItemIsTail();
void TryToRemoveItemOfEmptyList_ReturnsFalse();
void TryToRemoveItemOutOfRange_ReturnsFalse();
void RemovesSpecificItemFromList_ReturnsCorrectItem();
void RemoveOnlyItemInList_ReturnsCorrectItem();
void RemoveOnlyItemInList_HeadIsNullptr();
void RemoveOnlyItemInList_TailIsNullptr();
void RemoveFirstItemOfListWithTwoItems_SecondItemIsNowHead();
void RemoveFirstItemOfListWithTwoItems_SecondItemIsStillTail();
void RemoveItemInTheMiddleOfList_ItemFollowingTheRemovedItemNowOccupiesTheRemovedItemsIndex();
void RemoveItemInTheMiddleOfList_TheRemovedItemIsNoLongerInTheListAtTheRemovedIndex();
void RemoveItemInMiddleOfList_FollowingItemTakesRemovedItemsPosition();
void RemoveLastItemInList_SecondLastItemIsNowTail();
void RemoveLastItemInList_NewTailsNextPointerIsNowNullptr();
void RemoveOnlyItemInList_LengthIsZero();
void RemoveItemInPopulatedList_LengthDecreasesByOne();
void RemoveAllItemsInList_LengthIsZero();
void ClearList_HeadIsNullptr();
void ClearList_TailIsNullptr();
void ClearList_LengthIsZero();
void CheckIsEmptyWhenListHasNoItems_ReturnsTrue();
void CheckIsEmptyWhenNotEmpty_ReturnsFalse();
void CheckIsEmptyAfterInsertingItem_ReturnsFalse();
void CheckIsEmptyAfterBecomingEmpty_ReturnsTrue();
void CheckIsEmptyAfterAddingMultipleItemsThenRemovingOne_ReturnsFalse();

void RunTests() 
{
	RUN_TEST(EditModeInitialized_NotEnabledByDefault);
	RUN_TEST(SerialIsMocked_Works);
	RUN_TEST(ConfigurePinForKey_IKeysPinIsPassedToPinMode);
	RUN_TEST(ConfigurePinForKeyOfTypeKey_IsCorrectlyParsedToIKey);
	RUN_TEST(ConfigurePinForKeyOfTypeSpecialKey_IsCorrectlyParsedToIKey);
	RUN_TEST(ConfigurePinForKey_ConfiguresPinAsInputPullup);
	RUN_TEST(ConfigurePinForKey_CallsPinModeOnce);
	RUN_TEST(OnKeyPress_PinStateWentFromInactiveToActive_ReturnsTrue);
	RUN_TEST(OnKeyPress_PinStateValueDidNotChange_ReturnsFalse);
	RUN_TEST(OnKeyPress_PinStateIsInactive_ReturnFalse);
	RUN_TEST(OnKeyRelease_PinStateChangedToInactive_ReturnTrue);
	RUN_TEST(OnKeyRelease_PinStateDidNotChange_ReturnFalse);
	RUN_TEST(OnKeyRelease_PinStateIsActive_ReturnFalse);
	RUN_TEST(OnLongPress_TimePassedIsNotGreaterThanLongPressDuration_ReturnFalse);
	RUN_TEST(OnLongPress_TimePassedIsGreaterThanLongPressDuration_ReturnTrue);
	RUN_TEST(OnLongPress_TimePassedIsEqualToLongPressDuration_ReturnTrue);
	RUN_TEST(ConfigurePinsForKeyMap_InvokesPinModeForEachKey);
	RUN_TEST(ConfigurePinsForKeyMap_CallsPinModeWithPinFromKeyMap);
	RUN_TEST(ConfigurePinsForKeyMap_SetsUpPinAsInputPullup);
	RUN_TEST(DebounceRead_UpdatesOldValueOfStateWithPreviousStateValue);
	RUN_TEST(DebounceRead_ReadsStateOfPin);
	RUN_TEST(DebounceRead_PinStateHasChanged_UpdatesLastDebounceTime);
	RUN_TEST(DebounceRead_PinStateHasNotChanged_DoesNotUpdateLastDebounceTime);
	RUN_TEST(DebounceRead_DebounceTimeExceededAndValueIsOutdated_UpdateStateValue);
	RUN_TEST(DebounceRead_DebounceTimeExceededAndValueIsOutdatedAndTheNewValueIsActive_UpdateTheTimeOfActivation);
	RUN_TEST(DebounceRead_ValueIsOutdatedButDebounceTimeIsNotExceeded_DoesNotUpdateStateValue);
	RUN_TEST(DebounceRead_DebounceTimeExceededAndTheValueIsActiveButValueIsNotOutdated_DoesNotUpdateTheTimeOfActivation);
	RUN_TEST(DebounceRead_OldPinStateIsUpdated);
	RUN_TEST(ReadPinValuesForKeyMap_CallsDigitalReadForEachItem);
	RUN_TEST(ReadPinValuesForKeyMap_CorrectlyParsesKeyPin);
	RUN_TEST(ReadPinValuesForKeyMap_UpdatesStateForAllPins);
	RUN_TEST(GetFirstNode_GetsFirstNode);
	RUN_TEST(GetSecondNode_GetsSecondNode);
	RUN_TEST(GetNodeInTheMiddleOfList_GetsNode);
	RUN_TEST(GetLastNodeByPassingInLengthMinusOne_GetsLastNode);
	RUN_TEST(TryToGetNodeOutOfRange_GetsNullptr);
	RUN_TEST(TryToGetNodeWithEmptyList_GetsNullptr);
	RUN_TEST(TryToGetNodeWithNegativeNumber_GetsNullptr);
	RUN_TEST(GetTwoDifferentNodes_AllNodesAreNotTheSame);
	RUN_TEST(GetFirstItemUsingSubscriptOperator_GetsItem);
	RUN_TEST(GetSecondItemUsingSubscriptOperator_GetsSecondItem);
	RUN_TEST(GetItemInTheMiddleOfListUsingSubscriptOperator_GetsItem);
	RUN_TEST(GetLastItemByPassingLengthMinusOneToSubscriptOperator_GetsLastItem);
	RUN_TEST(OutOfRangeInSubscriptOperator_GetsNullptr);
	RUN_TEST(UsingSubscriptOperatorWithEmptyList_GetsNullptr);
	RUN_TEST(UsingSubscriptOperatorWithNegativeNumber_GetsNullptr);
	RUN_TEST(UsingSubscriptOperator_AllItemsAreNotTheSame);
	RUN_TEST(AddItemToList_ListContainsItem);
	RUN_TEST(AddOneItemToList_ItemBecomesHead);
	RUN_TEST(AddOneItemToList_ItemBecomesTail);
	RUN_TEST(AddTwoItemsToList_FirstIsHeadSecondIsTail);
	RUN_TEST(AddMultipleItemsToList_FirstlyAddedIsHeadLastlyAddedIsTail);
	RUN_TEST(AddItem_LengthIncreasesByOne);
	RUN_TEST(InsertItemIntoEmptyList_ItemIsHead);
	RUN_TEST(InsertItemIntoEmptyList_ItemIsTail);
	RUN_TEST(InsertItemAtIndexZero_ItemIsHead);
	RUN_TEST(InsertItemAtLastIndex_ItemIsTail);
	RUN_TEST(InsertItemAtIndexThenGetItemFromIndex_ItemAtIndexIsTheInsertedItem);
	RUN_TEST(InsertItemIntoMiddleOfPopulatedList_AllItemsArePresent);
	RUN_TEST(InsertItemIntoEmptyListWithIndexOutOfRange_NothingIsAdded);
	RUN_TEST(InsertItemIntoPopulatedListWithIndexOutOfRange_NothingIsAdded);
	RUN_TEST(InsertItem_LengthIncreasesByOne);
	RUN_TEST(InsertMultipleItems_LengthIsSameAsAmountOfItems);
	RUN_TEST(InsertItemAtLastIndexUsingLength_ItemIsTail);
	RUN_TEST(TryToRemoveItemOfEmptyList_ReturnsFalse);
	RUN_TEST(TryToRemoveItemOutOfRange_ReturnsFalse);
	RUN_TEST(RemovesSpecificItemFromList_ReturnsCorrectItem);
	RUN_TEST(RemoveOnlyItemInList_ReturnsCorrectItem);
	RUN_TEST(RemoveOnlyItemInList_HeadIsNullptr);
	RUN_TEST(RemoveOnlyItemInList_TailIsNullptr);
	RUN_TEST(RemoveFirstItemOfListWithTwoItems_SecondItemIsNowHead);
	RUN_TEST(RemoveFirstItemOfListWithTwoItems_SecondItemIsStillTail);
	RUN_TEST(RemoveItemInTheMiddleOfList_ItemFollowingTheRemovedItemNowOccupiesTheRemovedItemsIndex);
	RUN_TEST(RemoveItemInTheMiddleOfList_TheRemovedItemIsNoLongerInTheListAtTheRemovedIndex);
	RUN_TEST(RemoveItemInMiddleOfList_FollowingItemTakesRemovedItemsPosition);
	RUN_TEST(RemoveLastItemInList_SecondLastItemIsNowTail);
	RUN_TEST(RemoveLastItemInList_NewTailsNextPointerIsNowNullptr);
	RUN_TEST(RemoveOnlyItemInList_LengthIsZero);
	RUN_TEST(RemoveItemInPopulatedList_LengthDecreasesByOne);
	RUN_TEST(RemoveAllItemsInList_LengthIsZero);
	RUN_TEST(ClearList_HeadIsNullptr);
	RUN_TEST(ClearList_TailIsNullptr);
	RUN_TEST(ClearList_LengthIsZero);
	RUN_TEST(CheckIsEmptyWhenListHasNoItems_ReturnsTrue);
	RUN_TEST(CheckIsEmptyWhenNotEmpty_ReturnsFalse);
	RUN_TEST(CheckIsEmptyAfterInsertingItem_ReturnsFalse);
	RUN_TEST(CheckIsEmptyAfterBecomingEmpty_ReturnsTrue);
	RUN_TEST(CheckIsEmptyAfterAddingMultipleItemsThenRemovingOne_ReturnsFalse);
}

int digitalRead_return;
unsigned int digitalRead_invocations = 0;
uint8_t digitalRead_param_pin;
int digitalRead(uint8_t pin)
{
	digitalRead_param_pin = pin;
	digitalRead_invocations++;
	return digitalRead_return;
}

unsigned int pinMode_invocations = 0;
uint8_t pinMode_param_pin;
uint8_t pinMode_param_mode;
void pinMode(uint8_t pin, uint8_t mode)
{
	pinMode_param_pin = pin;
	pinMode_param_mode = mode;
	pinMode_invocations++;
}

unsigned long millis_return;
unsigned int millis_invocations = 0;
unsigned long millis()
{
	millis_invocations++;
	return millis_return;
}

unsigned int digitalWrite_invocations = 0;
uint8_t digitalWrite_param_pin;
uint8_t digitalWrite_param_val;
void digitalWrite(uint8_t pin, uint8_t val)
{
	digitalWrite_param_pin = pin;
	digitalWrite_param_val = val;
	digitalWrite_invocations++;
}

unsigned int delay_invocations = 0;
unsigned long delay_param_ms;
void delay(unsigned long ms)
{
	delay_param_ms = ms;
	delay_invocations++;
}

double pow_return;
unsigned int pow_invocations = 0;
double pow_param___x;
double pow_param___y;
double pow(double __x, double __y)
{
	pow_param___x = __x;
	pow_param___y = __y;
	pow_invocations++;
	return pow_return;
}

size_t Serial__print_return_o1;
unsigned int Serial__print_invocations_o1 = 0;
const char * Serial__print_param_a_o1;
size_t Serial_::print(const char * a)
{
	Serial__print_param_a_o1 = a;
	Serial__print_invocations_o1++;
	return Serial__print_return_o1;
}

size_t Serial__print_return_o2;
unsigned int Serial__print_invocations_o2 = 0;
char Serial__print_param_a_o2;
size_t Serial_::print(char a)
{
	Serial__print_param_a_o2 = a;
	Serial__print_invocations_o2++;
	return Serial__print_return_o2;
}

size_t Serial__print_return_o3;
unsigned int Serial__print_invocations_o3 = 0;
unsigned char Serial__print_param_a_o3;
int Serial__print_param_b_o3;
size_t Serial_::print(unsigned char a, int b)
{
	Serial__print_param_a_o3 = a;
	Serial__print_param_b_o3 = b;
	Serial__print_invocations_o3++;
	return Serial__print_return_o3;
}

size_t Serial__print_return_o4;
unsigned int Serial__print_invocations_o4 = 0;
int Serial__print_param_a_o4;
int Serial__print_param_b_o4;
size_t Serial_::print(int a, int b)
{
	Serial__print_param_a_o4 = a;
	Serial__print_param_b_o4 = b;
	Serial__print_invocations_o4++;
	return Serial__print_return_o4;
}

size_t Serial__print_return_o5;
unsigned int Serial__print_invocations_o5 = 0;
unsigned int Serial__print_param_a_o5;
int Serial__print_param_b_o5;
size_t Serial_::print(unsigned int a, int b)
{
	Serial__print_param_a_o5 = a;
	Serial__print_param_b_o5 = b;
	Serial__print_invocations_o5++;
	return Serial__print_return_o5;
}

size_t Serial__print_return_o6;
unsigned int Serial__print_invocations_o6 = 0;
long Serial__print_param_a_o6;
int Serial__print_param_b_o6;
size_t Serial_::print(long a, int b)
{
	Serial__print_param_a_o6 = a;
	Serial__print_param_b_o6 = b;
	Serial__print_invocations_o6++;
	return Serial__print_return_o6;
}

size_t Serial__print_return_o7;
unsigned int Serial__print_invocations_o7 = 0;
unsigned long Serial__print_param_a_o7;
int Serial__print_param_b_o7;
size_t Serial_::print(unsigned long a, int b)
{
	Serial__print_param_a_o7 = a;
	Serial__print_param_b_o7 = b;
	Serial__print_invocations_o7++;
	return Serial__print_return_o7;
}

size_t Serial__print_return_o8;
unsigned int Serial__print_invocations_o8 = 0;
double Serial__print_param_a_o8;
int Serial__print_param_b_o8;
size_t Serial_::print(double a, int b)
{
	Serial__print_param_a_o8 = a;
	Serial__print_param_b_o8 = b;
	Serial__print_invocations_o8++;
	return Serial__print_return_o8;
}

size_t Serial__println_return_o1;
unsigned int Serial__println_invocations_o1 = 0;
const char * Serial__println_param_a_o1;
size_t Serial_::println(const char * a)
{
	Serial__println_param_a_o1 = a;
	Serial__println_invocations_o1++;
	return Serial__println_return_o1;
}

size_t Serial__println_return_o2;
unsigned int Serial__println_invocations_o2 = 0;
char Serial__println_param_b_o2;
size_t Serial_::println(char b)
{
	Serial__println_param_b_o2 = b;
	Serial__println_invocations_o2++;
	return Serial__println_return_o2;
}

size_t Serial__println_return_o3;
unsigned int Serial__println_invocations_o3 = 0;
unsigned char Serial__println_param_a_o3;
int Serial__println_param_b_o3;
size_t Serial_::println(unsigned char a, int b)
{
	Serial__println_param_a_o3 = a;
	Serial__println_param_b_o3 = b;
	Serial__println_invocations_o3++;
	return Serial__println_return_o3;
}

size_t Serial__println_return_o4;
unsigned int Serial__println_invocations_o4 = 0;
int Serial__println_param_a_o4;
int Serial__println_param_b_o4;
size_t Serial_::println(int a, int b)
{
	Serial__println_param_a_o4 = a;
	Serial__println_param_b_o4 = b;
	Serial__println_invocations_o4++;
	return Serial__println_return_o4;
}

size_t Serial__println_return_o5;
unsigned int Serial__println_invocations_o5 = 0;
unsigned int Serial__println_param_a_o5;
int Serial__println_param_b_o5;
size_t Serial_::println(unsigned int a, int b)
{
	Serial__println_param_a_o5 = a;
	Serial__println_param_b_o5 = b;
	Serial__println_invocations_o5++;
	return Serial__println_return_o5;
}

size_t Serial__println_return_o6;
unsigned int Serial__println_invocations_o6 = 0;
long Serial__println_param_a_o6;
int Serial__println_param_b_o6;
size_t Serial_::println(long a, int b)
{
	Serial__println_param_a_o6 = a;
	Serial__println_param_b_o6 = b;
	Serial__println_invocations_o6++;
	return Serial__println_return_o6;
}

size_t Serial__println_return_o7;
unsigned int Serial__println_invocations_o7 = 0;
unsigned long Serial__println_param_a_o7;
int Serial__println_param_b_o7;
size_t Serial_::println(unsigned long a, int b)
{
	Serial__println_param_a_o7 = a;
	Serial__println_param_b_o7 = b;
	Serial__println_invocations_o7++;
	return Serial__println_return_o7;
}

size_t Serial__println_return_o8;
unsigned int Serial__println_invocations_o8 = 0;
double Serial__println_param_a_o8;
int Serial__println_param_b_o8;
size_t Serial_::println(double a, int b)
{
	Serial__println_param_a_o8 = a;
	Serial__println_param_b_o8 = b;
	Serial__println_invocations_o8++;
	return Serial__println_return_o8;
}

size_t Serial__println_return_o9;
unsigned int Serial__println_invocations_o9 = 0;
size_t Serial_::println()
{
	Serial__println_invocations_o9++;
	return Serial__println_return_o9;
}


void ResetMocks() 
{
	digitalRead_param_pin = uint8_t();
	digitalRead_invocations = 0;
	digitalRead_return = int();
	pinMode_param_pin = uint8_t();
	pinMode_param_mode = uint8_t();
	pinMode_invocations = 0;
	millis_invocations = 0;
	millis_return = long();
	digitalWrite_param_pin = uint8_t();
	digitalWrite_param_val = uint8_t();
	digitalWrite_invocations = 0;
	delay_param_ms = long();
	delay_invocations = 0;
	pow_param___x = double();
	pow_param___y = double();
	pow_invocations = 0;
	pow_return = double();
	Serial__print_param_a_o1 = nullptr;
	Serial__print_invocations_o1 = 0;
	Serial__print_return_o1 = size_t();
	Serial__print_param_a_o2 = char();
	Serial__print_invocations_o2 = 0;
	Serial__print_return_o2 = size_t();
	Serial__print_param_a_o3 = char();
	Serial__print_param_b_o3 = int();
	Serial__print_invocations_o3 = 0;
	Serial__print_return_o3 = size_t();
	Serial__print_param_a_o4 = int();
	Serial__print_param_b_o4 = int();
	Serial__print_invocations_o4 = 0;
	Serial__print_return_o4 = size_t();
	Serial__print_param_a_o5 = int();
	Serial__print_param_b_o5 = int();
	Serial__print_invocations_o5 = 0;
	Serial__print_return_o5 = size_t();
	Serial__print_param_a_o6 = long();
	Serial__print_param_b_o6 = int();
	Serial__print_invocations_o6 = 0;
	Serial__print_return_o6 = size_t();
	Serial__print_param_a_o7 = long();
	Serial__print_param_b_o7 = int();
	Serial__print_invocations_o7 = 0;
	Serial__print_return_o7 = size_t();
	Serial__print_param_a_o8 = double();
	Serial__print_param_b_o8 = int();
	Serial__print_invocations_o8 = 0;
	Serial__print_return_o8 = size_t();
	Serial__println_param_a_o1 = nullptr;
	Serial__println_invocations_o1 = 0;
	Serial__println_return_o1 = size_t();
	Serial__println_param_b_o2 = char();
	Serial__println_invocations_o2 = 0;
	Serial__println_return_o2 = size_t();
	Serial__println_param_a_o3 = char();
	Serial__println_param_b_o3 = int();
	Serial__println_invocations_o3 = 0;
	Serial__println_return_o3 = size_t();
	Serial__println_param_a_o4 = int();
	Serial__println_param_b_o4 = int();
	Serial__println_invocations_o4 = 0;
	Serial__println_return_o4 = size_t();
	Serial__println_param_a_o5 = int();
	Serial__println_param_b_o5 = int();
	Serial__println_invocations_o5 = 0;
	Serial__println_return_o5 = size_t();
	Serial__println_param_a_o6 = long();
	Serial__println_param_b_o6 = int();
	Serial__println_invocations_o6 = 0;
	Serial__println_return_o6 = size_t();
	Serial__println_param_a_o7 = long();
	Serial__println_param_b_o7 = int();
	Serial__println_invocations_o7 = 0;
	Serial__println_return_o7 = size_t();
	Serial__println_param_a_o8 = double();
	Serial__println_param_b_o8 = int();
	Serial__println_invocations_o8 = 0;
	Serial__println_return_o8 = size_t();
	Serial__println_invocations_o9 = 0;
	Serial__println_return_o9 = size_t();
}

